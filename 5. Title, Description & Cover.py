# -*- coding: utf-8 -*-
"""Final Assets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nkIH7BXgC_-YL9Kb3siDGzdPw_RaOgxZ
"""

# ‚îÄ‚îÄ Cell 1: Install and Import Dependencies ‚îÄ‚îÄ
!pip install openai ipywidgets requests --quiet

import os
from dotenv import load_dotenv
import openai
load_dotenv()
import ipywidgets as widgets
from IPython.display import display, Image, HTML

# ‚îÄ‚îÄ Cell 3: Upload/Paste Script ‚Üí Proceed Button ‚Üí Title Suggestions UI ‚îÄ‚îÄ

# 1) INPUT WIDGETS
upload = widgets.FileUpload(accept='.txt', multiple=False)
text_area = widgets.Textarea(
    value='',
    placeholder='Paste your video script here (up to 5000 characters)...',
    description='Script Input:',
    layout=widgets.Layout(width='100%', height='200px')
)
use_file_checkbox = widgets.Checkbox(
    value=False,
    description='Use uploaded file instead of text input'
)
proceed_button = widgets.Button(
    description="Proceed to Title Suggestions",
    button_style='primary'
)

# Helper to read the script
def get_script():
    if use_file_checkbox.value and upload.value:
        filename = list(upload.value.keys())[0]
        content = upload.value[filename]['content'].decode('utf-8')
        return content
    else:
        return text_area.value

# Display the input widgets
input_box = widgets.VBox([
    widgets.HTML("<b>Select Input Method:</b>"),
    use_file_checkbox,
    widgets.HTML("<b>Upload a .txt file:</b>"),
    upload,
    widgets.HTML("<b>Or paste your script below:</b>"),
    text_area,
    proceed_button
])
display(input_box)

# 2) TITLE‚ÄêSELECTION UI (initially hidden)
title_box = widgets.RadioButtons(
    options=[],
    description='Titles:',
    layout=widgets.Layout(width='100%')
)
confirm_button = widgets.Button(description="Confirm Title", button_style='success')
more_button = widgets.Button(description="More Options", button_style='info')
output_title = widgets.Output()

title_ui = widgets.VBox([
    widgets.HTML("<h4>Step 1: Choose a Clickbait Title</h4>"),
    output_title,
    title_box,
    widgets.HBox([confirm_button, more_button])
])
title_ui.layout.display = 'none'  # hide at first
display(title_ui)

# 3) FUNCTIONS TO GENERATE & CONFIRM TITLES
def generate_titles(_=None):
    output_title.clear_output()
    script = get_script().strip()
    if not script:
        with output_title:
            print("‚ö†Ô∏è Please provide a video script first (upload or paste it above).")
        return

    prompt = (
        f"Given the following YouTube video script, suggest 5 clickbait-friendly titles:\n\n"
        f"{script}\n\n"
        "Respond with a numbered list of 5 titles."
    )
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    content = response.choices[0].message.content.strip()
    titles = []
    for line in content.splitlines():
        line = line.strip()
        if line and line[0].isdigit() and "." in line:
            title = line.split(".", 1)[1].strip()
            titles.append(title)
    if len(titles) < 5:
        # fallback: any non-empty line
        titles = [line for line in content.splitlines() if line.strip()]

    title_box.options = titles

more_button.on_click(generate_titles)

def confirm_title(_):
    selected = title_box.value
    if selected:
        with output_title:
            print(f"‚úÖ Title confirmed: \"{selected}\"")
        title_box.disabled = True
        confirm_button.disabled = True
        more_button.disabled = True
        display_seo_description(selected)

confirm_button.on_click(confirm_title)

# 4) ‚ÄúProceed‚Äù‚ÄêButton Handler: show title UI and auto‚Äêgenerate initial titles
def on_proceed_clicked(_):
    script = get_script().strip()
    if not script:
        from IPython.display import clear_output
        clear_output(wait=True)
        display(input_box)
        print("‚ö†Ô∏è You must upload or paste a script before proceeding.")
        return

    input_box.layout.display = 'none'
    title_ui.layout.display = 'flex'
    generate_titles()

proceed_button.on_click(on_proceed_clicked)

# ‚îÄ‚îÄ Cell 4: Generate SEO-Optimized YouTube Description ‚îÄ‚îÄ

description_output = widgets.Output()

def display_seo_description(chosen_title):
    with description_output:
        print(f"üîÑ Generating SEO-optimized description for: \"{chosen_title}\"...\n")
    prompt = (
        f"Write a brief, SEO-optimized YouTube video description for a video titled \"{chosen_title}\". "
        "At the end, include a call to action to like and subscribe. "
        "After a blank line, list ten relevant hashtags separated by spaces to attract more views. "
        "Structure the output as:\n\n"
        "<description>\n\n"
        "<call to action>\n\n"
        "<hashtags>"
    )
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}]
    )
    desc_content = response.choices[0].message.content.strip()
    description_output.clear_output()
    with description_output:
        print("üéØ SEO-Optimized Description:\n")
        print(desc_content)

display(widgets.HTML("<h4>Step 2: SEO-Optimized Video Description</h4>"))
display(description_output)

# ‚îÄ‚îÄ Cell 5: Generate Transparent Background Title Image (using GPT Image 1 via Responses API) ‚îÄ‚îÄ

import base64

style_options = {
    "Random": "Generate a transparent-background thumbnail image of the title \"{title}\" in a unique, eye-catching style with bold fonts.",
    "It's Always Sunny in Philadelphia": "Generate a transparent-background thumbnail image of the title \"{title}\" using typography and color scheme reminiscent of \"It's Always Sunny in Philadelphia\" title cards.",
    "SpongeBob SquarePants": "Generate a transparent-background thumbnail image of the title \"{title}\" in a bubbly, colorful font style similar to \"SpongeBob SquarePants\" logos.",
    "Game of Thrones": "Generate a transparent-background thumbnail image of the title \"{title}\" using a medieval serif font and regal styling reminiscent of \"Game of Thrones\" title sequence.",
    "Seinfeld": "Generate a transparent-background thumbnail image of the title \"{title}\" in a simple, bold font with framing similar to \"Seinfeld\" logo.",
    "Rick and Morty": "Generate a transparent-background thumbnail image of the title \"{title}\" in a wavy, neon-green font style reminiscent of \"Rick and Morty\" title.",
    # (Add additional styles here as needed)
}

style_dropdown = widgets.Dropdown(
    options=list(style_options.keys()),
    value="Random",
    description="Style:",
    layout=widgets.Layout(width='50%')
)
# GPT Image 1 supports sizes: "1024x1024", "1536x1024", "1024x1536", or "auto"
size_dropdown = widgets.Dropdown(
    options=["auto", "1024x1024", "1536x1024", "1024x1536"],
    value="auto",
    description="Size:",
    layout=widgets.Layout(width='25%')
)
# Quality options: "auto", "low", "medium", "high"
quality_dropdown = widgets.Dropdown(
    options=["auto", "low", "medium", "high"],
    value="auto",
    description="Quality:",
    layout=widgets.Layout(width='20%')
)
generate_image_button = widgets.Button(description="Generate Title Image", button_style='primary')
image_output = widgets.Output()

def generate_title_image(_):
    image_output.clear_output()
    title = title_box.value
    if not title:
        with image_output:
            print("‚ö†Ô∏è Please confirm a video title first (Step 1).")
        return

    # Build the prompt from the chosen style
    style_key = style_dropdown.value
    prompt_template = style_options[style_key]
    prompt = prompt_template.format(title=title)

    chosen_size = size_dropdown.value
    chosen_quality = quality_dropdown.value

    with image_output:
        print("üîÑ Generating title image with GPT Image 1...")

    # ===== Updated to use openai.responses.create(...) per the official docs =====
    response = openai.responses.create(
        model="gpt-4o-mini",   # any model that supports the image_generation tool (e.g. gpt-4o-mini)
        input=prompt,
        tools=[{
            "type": "image_generation",
            "size": chosen_size,
            "quality": chosen_quality,
            "background": "transparent"
        }]
    )

    # Extract the base64‚Äêencoded PNG from response.output
    image_b64_list = [
        output.result
        for output in response.output
        if output.type == "image_generation_call"
    ]
    if not image_b64_list:
        with image_output:
            print("‚ö†Ô∏è No image data returned. Try adjusting size/quality or re-run.")
        return

    image_b64 = image_b64_list[0]
    image_bytes = base64.b64decode(image_b64)
    filename = "title_image.png"
    with open(filename, "wb") as f:
        f.write(image_bytes)

    with image_output:
        display(Image(filename=filename))
        display(HTML(f'<a href="{filename}" download>üì• Download Title Image</a>'))

generate_image_button.on_click(generate_title_image)

display(widgets.HTML("<h4>Step 3: Generate Title Image</h4>"))
display(widgets.HTML("<b>Selected Title:</b>"))
display(title_box)  # show the confirmed title again
display(widgets.HBox([style_dropdown, size_dropdown, quality_dropdown]))
display(generate_image_button)
display(image_output)

# ‚îÄ‚îÄ Cell 6: Generate Transparent Background Title Image (using GPT Image 1 via Responses API) ‚îÄ‚îÄ
import base64

style_options = {
    "Random": "Generate a transparent-background thumbnail image of the title \"{title}\" in a unique, eye-catching style with bold fonts.",
    "It's Always Sunny in Philadelphia": "Generate a transparent-background thumbnail image of the title \"{title}\" using typography and color scheme reminiscent of \"It's Always Sunny in Philadelphia\" title cards.",
    "SpongeBob SquarePants": "Generate a transparent-background thumbnail image of the title \"{title}\" in a bubbly, colorful font style similar to \"SpongeBob SquarePants\" logos.",
    "Game of Thrones": "Generate a transparent-background thumbnail image of the title \"{title}\" using a medieval serif font and regal styling reminiscent of \"Game of Thrones\" title sequence.",
    "Seinfeld": "Generate a transparent-background thumbnail image of the title \"{title}\" in a simple, bold font with framing similar to \"Seinfeld\" logo.",
    "Rick and Morty": "Generate a transparent-background thumbnail image of the title \"{title}\" in a wavy, neon-green font style reminiscent of \"Rick and Morty\" title.",
    # Add more styles here as desired
}

style_dropdown = widgets.Dropdown(
    options=list(style_options.keys()),
    value="Random",
    description="Style:",
    layout=widgets.Layout(width='50%')
)
# GPT Image 1 supports sizes: "1024x1024", "1536x1024", "1024x1536", or "auto"
size_dropdown = widgets.Dropdown(
    options=["auto", "1024x1024", "1536x1024", "1024x1536"],
    value="auto",
    description="Size:",
    layout=widgets.Layout(width='25%')
)
# Quality options: "auto", "low", "medium", "high"
quality_dropdown = widgets.Dropdown(
    options=["auto", "low", "medium", "high"],
    value="auto",
    description="Quality:",
    layout=widgets.Layout(width='20%')
)
generate_image_button = widgets.Button(description="Generate Title Image", button_style='primary')
image_output = widgets.Output()

def generate_title_image(_):
    """
    Uses the Responses API with GPT Image 1 to generate a transparent-background title image,
    then downloads and displays it.
    """
    image_output.clear_output()
    title = title_box.value
    if not title:
        with image_output:
            print("‚ö†Ô∏è Please confirm a video title first (Step 1).")
        return

    style_key = style_dropdown.value
    prompt_template = style_options[style_key]
    prompt = prompt_template.format(title=title)
    chosen_size = size_dropdown.value
    chosen_quality = quality_dropdown.value

    with image_output:
        print("üîÑ Generating title image with GPT Image 1...")

    # Build the Responses API call
    response = openai.responses.create(
        model="gpt-4o-mini",  # any model that supports image_generation (e.g., gpt-4o-mini)
        input=[{"role": "user", "content": prompt}],
        tools=[{
            "type": "image_generation",
            "size": chosen_size,
            "quality": chosen_quality,
            "background": "transparent"
        }]
    )

    # Extract the base64 string from the outputs
    image_data = [
        output.result
        for output in response.output
        if output.type == "image_generation_call"
    ]
    if not image_data:
        with image_output:
            print("‚ö†Ô∏è No image data returned. Please try again or adjust parameters.")
        return

    image_b64 = image_data[0]
    image_bytes = base64.b64decode(image_b64)
    filename = "title_image.png"
    with open(filename, "wb") as f:
        f.write(image_bytes)

    with image_output:
        display(Image(filename=filename))
        display(HTML(f'<a href="{filename}" download>üì• Download Title Image</a>'))

generate_image_button.on_click(generate_title_image)

display(widgets.HTML("<h4>Step 3: Generate Title Image</h4>"))
display(widgets.HTML("<b>Selected Title:</b>"))
display(title_box)  # Show the chosen title again for reference
display(widgets.HBox([style_dropdown, size_dropdown, quality_dropdown]))
display(generate_image_button)
display(image_output)

