# -*- coding: utf-8 -*-
"""Idea Generation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11W2pN61EtpNJe7X_rTJAYZ1nKwqZsWJt
"""

# ───────────────────────────
# BLOCK 0 — Install packages
# ───────────────────────────
!pip install --quiet --upgrade openai python-slugify

# ───────────────────────────
# BLOCK 1 — API key & config
# ───────────────────────────
import os
from dotenv import load_dotenv

# Load API key from .env or environment
load_dotenv()

MODEL            = "gpt-4.1-nano"   # change if desired
TEMPERATURE      = 0.8
MAX_CHARACTERS   = 2500
N_CATEGORIES     = 5
N_IDEAS          = 10
DEBUG_RAW_REPLY  = False           # set True to inspect model output

# ───────────────────────────
# BLOCK 2 — Imports & helpers
# (full overwrite)
# ───────────────────────────
import json, textwrap, re
from pathlib import Path
from slugify import slugify
import openai

openai.api_key = os.getenv("OPENAI_API_KEY")

# ── Shared channel context ────────────────────
TLDR_DESC = (
    "You are the strategist & scriptwriter behind the YouTube channel “TL;DR Theater,” "
    "which publishes short, funny, punchy AI‑generated explainer videos with AI images "
    "and TTS narration. **Rules for every script:** "
    "—No greetings or sign‑offs, "
    "—No channel name mentions, "
    "—No like/subscribe calls, "
    "—Narration only (no scene headers)."
)

# ── Prompt templates ──────────────────────────
SYSTEM_CATEGORY = (
    f"{TLDR_DESC}\n"
    "Suggest faceless‑YouTube *niche categories* the channel could explore. "
    "Return ONLY a JSON array."
)

SYSTEM_IDEA = (
    f"{TLDR_DESC}\n"
    "Generate {n} specific video ideas for the niche category: “{category}”. "
    "Each idea must be an attention‑grabbing title (≤12 words). "
    "Return ONLY a JSON array."
)

SYSTEM_SCRIPT = (
    f"{TLDR_DESC}\n\n"
    "Write the full narration script for a video titled: “{idea}”. "
    "Tone = witty, playful, fast‑moving. "
    "TTS‑friendly (simple punctuation, no em‑dashes). "
    "Limit to {MAX_CHARACTERS} characters. "
    "⚠️  Output ONLY the narration text—no greetings or CTAs."
)

SYSTEM_EDIT = (
    f"{TLDR_DESC}\n"
    "Below is the current script between <script> tags. Rewrite per user request.\n"
    "<script>\n{script}\n</script>\n\n"
    "User instruction: “{instruction}”\n\n"
    "Return ONLY the revised narration, still ≤{MAX_CHARACTERS} characters."
)

# ── Chat wrapper ──────────────────────────────
def chat(system: str, user: str = "", temperature: float = TEMPERATURE) -> str:
    messages = [{"role": "system", "content": system}]
    if user:
        messages.append({"role": "user", "content": user})
    resp = openai.chat.completions.create(
        model=MODEL,
        messages=messages,
        temperature=temperature,
    ).choices[0].message.content.strip()
    if DEBUG_RAW_REPLY:
        print("RAW ►", resp)
    return resp

# ── Robust JSON extraction ────────────────────
def force_json_list(raw: str):
    try:
        return json.loads(raw)
    except json.JSONDecodeError:
        m = re.search(r"\[.*\]", raw, re.S)
        if m:
            return json.loads(m.group(0))
        raise

# ── Script clean‑up helpers ───────────────────
_SCENE_RX   = re.compile(r"^\s*(?:scene|shot)\s*\d*[:.\-]\s*", re.I)
_BANNED_RX  = re.compile(
    r"(tl;?dr theater|thanks for watching|subscribe|welcome to|don[’']t forget to)",
    re.I,
)

def strip_tags_and_banners(txt: str) -> str:
    """Remove <script> tags, scene headers, and banned greeting/CTA lines."""
    txt = re.sub(r"</?script>", "", txt, flags=re.I)
    lines = [
        ln for ln in txt.splitlines()
        if not _SCENE_RX.match(ln) and not _BANNED_RX.search(ln)
    ]
    return "\n".join(lines).strip()

# ───────────────────────────
# BLOCK 3 — Pick a category
# ───────────────────────────
raw_cats = chat(SYSTEM_CATEGORY, temperature=TEMPERATURE - 0.2)
categories = force_json_list(raw_cats)

print("Faceless‑YouTube niche categories:\n")
for i, cat in enumerate(categories, 1):
    print(f"{i}. {cat}")

chosen_cat = categories[int(input("\nPick a category number: ")) - 1]
print("\n✅  Chosen category:", chosen_cat)

# ───────────────────────────
# BLOCK 4 — Pick a video idea
# ───────────────────────────
raw_ideas = chat(SYSTEM_IDEA.format(category=chosen_cat, n=N_IDEAS))
ideas = force_json_list(raw_ideas)

print(f"\nVideo ideas for “{chosen_cat}”:\n")
for i, idea in enumerate(ideas, 1):
    print(f"{i}. {idea}")

chosen_idea = ideas[int(input("\nPick an idea number: ")) - 1]
print("\n✅  Chosen idea:", chosen_idea)

# ───────────────────────────
# BLOCK 5 — First‑draft script
# (full overwrite)
# ───────────────────────────
raw_script = chat(
    SYSTEM_SCRIPT.format(
        idea=chosen_idea,
        MAX_CHARACTERS=MAX_CHARACTERS,
    )
)
script = strip_tags_and_banners(raw_script)

print("\n── First‑draft script ──\n")
print(textwrap.fill(script, 100))
print(f"\nLength: {len(script)} characters")

# ───────────────────────────
# BLOCK 6 — Editing loop
# (overwrite the whole cell)
# ───────────────────────────
while True:
    instruction = input("\nType an edit, 'regen' for fresh draft, or press Enter to finish: ").strip()
    if not instruction:
        break

    if instruction.lower() == "regen":
        raw_script = chat(
            SYSTEM_SCRIPT.format(
                idea=chosen_idea,
                MAX_CHARACTERS=MAX_CHARACTERS,
            )
        )
    else:
        raw_script = chat(
            SYSTEM_EDIT.format(
                script=script,
                instruction=instruction,
                MAX_CHARACTERS=MAX_CHARACTERS,
            ),
            temperature=TEMPERATURE,
        )

    script = strip_tags(raw_script)

    print("\n── Updated script ──\n")
    print(textwrap.fill(script, 100))
    print(f"\nLength: {len(script)} characters")

# ───────────────────────────
# BLOCK 7 — Save script
# ───────────────────────────
filename = slugify(chosen_idea)[:50] + ".txt"
Path(filename).write_text(script, encoding="utf‑8")
print("\n💾  Saved:", filename)